{"ast":null,"code":"import { useAutorStore } from \"../../store/autorStore\";\nimport { useOrientadorStore } from \"../../store/orientadorStore\";\nimport { useObraStore } from \"../../store/obraStore\";\nimport { useCursoStore } from \"../../store/cursoStore\";\nimport { onMounted, ref } from \"vue\";\nexport default {\n  setup() {\n    const autorStore = useAutorStore();\n    const orientadorStore = useOrientadorStore();\n    const obraStore = useObraStore();\n    const cursoStore = useCursoStore();\n    const autores = ref([]);\n    const orientadores = ref([]);\n    const tiposDeObra = ref([]);\n    const cursos = ref([]);\n    const obras = ref([]);\n    const dropdownOptions = ref([[],\n    // Autor\n    [],\n    // Título\n    [],\n    // Curso\n    [],\n    // Ano\n    [],\n    // Orientador\n    [] // Tipo de Obra\n    ]);\n    const buttons = [\"Autor\", \"Título\", \"Áreas de Conhecimento - Cursos\", \"Data de Defesa\", \"Orientador\", \"Tipo de Obra\"];\n    const dropdowns = ref([false, false, false, false, false, false]);\n    const pages = ref([0, 0, 0, 0, 0, 0]); // Página atual para cada dropdown\n\n    const itemsPerPage = 7; // Número de itens por página\n\n    const toggleDropdown = index => {\n      dropdowns.value[index] = !dropdowns.value[index];\n    };\n\n    // Agrupa itens baseados na relação com as obras e conta as ocorrências\n    const groupAndCountByCustomRelation = (relationKey, mapFn) => {\n      const grouped = obras.value.reduce((acc, obra) => {\n        const key = mapFn(obra); // mapFn agora corretamente acessa a chave desejada\n        if (!key) return acc;\n        acc[key] = (acc[key] || 0) + 1;\n        return acc;\n      }, {});\n      return Object.entries(grouped).map(([text, count]) => ({\n        text,\n        count\n      })).sort((a, b) => a.text.localeCompare(b.text));\n    };\n\n    // Atualiza os dropdowns após carregar os dados\n    const updateDropdowns = () => {\n      // Agora chamamos a função corretamente, passando a função de mapeamento para o autor\n      dropdownOptions.value[0] = groupAndCountByCustomRelation(\"autor_id\", obra => obra.autor_id);\n    };\n\n    // Função para obter os itens visíveis da página atual\n    const getVisibleItems = index => {\n      const start = pages.value[index] * itemsPerPage;\n      return dropdownOptions.value[index].slice(start, start + itemsPerPage);\n    };\n\n    // Verifica se há uma página anterior\n    const hasPreviousPage = index => {\n      return pages.value[index] > 0;\n    };\n\n    // Verifica se há uma página seguinte\n    const hasNextPage = index => {\n      const totalItems = dropdownOptions.value[index].length;\n      return pages.value[index] * itemsPerPage + itemsPerPage < totalItems;\n    };\n\n    // Vai para a página anterior\n    const goToPreviousPage = index => {\n      if (pages.value[index] > 0) {\n        pages.value[index]--;\n      }\n    };\n\n    // Vai para a próxima página\n    const goToNextPage = index => {\n      const totalItems = dropdownOptions.value[index].length;\n      if (pages.value[index] * itemsPerPage + itemsPerPage < totalItems) {\n        pages.value[index]++;\n      }\n    };\n    onMounted(async () => {\n      try {\n        await autorStore.listarAutores();\n        autores.value = autorStore.autores || [];\n        await orientadorStore.listarOrientadores();\n        orientadores.value = orientadorStore.orientadores || [];\n        await obraStore.listarObras();\n        obras.value = obraStore.obras || [];\n        tiposDeObra.value = obras.value.map(obra => obra.tipo).filter(t => t);\n        await cursoStore.listarCursos();\n        cursos.value = cursoStore.cursos || [];\n\n        // Atualiza os dropdowns com os dados carregados\n        updateDropdowns();\n      } catch (error) {\n        console.error(\"Erro ao carregar dados:\", error);\n      }\n    });\n    return {\n      autores,\n      orientadores,\n      tiposDeObra,\n      cursos,\n      obras,\n      dropdownOptions,\n      buttons,\n      dropdowns,\n      toggleDropdown,\n      getVisibleItems,\n      hasPreviousPage,\n      hasNextPage,\n      goToPreviousPage,\n      goToNextPage\n    };\n  }\n};","map":{"version":3,"names":["useAutorStore","useOrientadorStore","useObraStore","useCursoStore","onMounted","ref","setup","autorStore","orientadorStore","obraStore","cursoStore","autores","orientadores","tiposDeObra","cursos","obras","dropdownOptions","buttons","dropdowns","pages","itemsPerPage","toggleDropdown","index","value","groupAndCountByCustomRelation","relationKey","mapFn","grouped","reduce","acc","obra","key","Object","entries","map","text","count","sort","a","b","localeCompare","updateDropdowns","autor_id","getVisibleItems","start","slice","hasPreviousPage","hasNextPage","totalItems","length","goToPreviousPage","goToNextPage","listarAutores","listarOrientadores","listarObras","tipo","filter","t","listarCursos","error","console"],"sources":["C:\\Users\\Micro\\Music\\sistema_tcc\\aplicacao\\frontend\\src\\components\\lista\\ListaSuspensa.vue"],"sourcesContent":["<template>\r\n  <v-container class=\"d-flex flex-column align-center gap-4\">\r\n    <!-- Botões com Lista Suspensa -->\r\n    <v-row class=\"button-container\" justify=\"center\" align=\"center\">\r\n      <v-col\r\n        v-for=\"(item, index) in buttons\"\r\n        :key=\"index\"\r\n        cols=\"12\"\r\n        md=\"4\"\r\n        class=\"mb-4\"\r\n      >\r\n        <!-- Botão Principal -->\r\n        <v-btn\r\n          class=\"filter-button\"\r\n          elevation=\"2\"\r\n          dark\r\n          @click=\"toggleDropdown(index)\"\r\n        >\r\n          <!-- Ícone à Esquerda -->\r\n          <v-icon class=\"me-2\">\r\n            {{ dropdowns[index] ? 'mdi-minus' : 'mdi-plus' }}\r\n          </v-icon>\r\n          <span>{{ item }}</span>\r\n        </v-btn>\r\n\r\n        <!-- Lista Suspensa -->\r\n        <v-expand-transition>\r\n          <div v-if=\"dropdowns[index]\" class=\"dropdown-list\">\r\n            <ul>\r\n              <li v-for=\"(entry, idx) in getVisibleItems(index)\" :key=\"idx\">\r\n                {{ entry.text }} ({{ entry.count }} obras)\r\n              </li>\r\n            </ul>\r\n\r\n            <!-- Botões para navegar entre as páginas -->\r\n            <div v-if=\"dropdowns[index]\" class=\"pagination-buttons\">\r\n              <v-btn\r\n                v-if=\"hasPreviousPage(index)\"\r\n                @click=\"goToPreviousPage(index)\"\r\n                class=\"pagination-button\"\r\n              >\r\n                Voltar\r\n              </v-btn>\r\n\r\n              <v-btn\r\n                v-if=\"hasNextPage(index)\"\r\n                @click=\"goToNextPage(index)\"\r\n                class=\"pagination-button\"\r\n              >\r\n                Próximo\r\n              </v-btn>\r\n            </div>\r\n          </div>\r\n        </v-expand-transition>\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport { useAutorStore } from \"../../store/autorStore\";\r\nimport { useOrientadorStore } from \"../../store/orientadorStore\";\r\nimport { useObraStore } from \"../../store/obraStore\";\r\nimport { useCursoStore } from \"../../store/cursoStore\";\r\nimport { onMounted, ref } from \"vue\";\r\n\r\nexport default {\r\n  setup() {\r\n    const autorStore = useAutorStore();\r\n    const orientadorStore = useOrientadorStore();\r\n    const obraStore = useObraStore();\r\n    const cursoStore = useCursoStore();\r\n\r\n    const autores = ref([]);\r\n    const orientadores = ref([]);\r\n    const tiposDeObra = ref([]);\r\n    const cursos = ref([]);\r\n    const obras = ref([]);\r\n\r\n    const dropdownOptions = ref([\r\n      [], // Autor\r\n      [], // Título\r\n      [], // Curso\r\n      [], // Ano\r\n      [], // Orientador\r\n      [], // Tipo de Obra\r\n    ]);\r\n\r\n    const buttons = [\r\n      \"Autor\",\r\n      \"Título\",\r\n      \"Áreas de Conhecimento - Cursos\",\r\n      \"Data de Defesa\",\r\n      \"Orientador\",\r\n      \"Tipo de Obra\",\r\n    ];\r\n\r\n    const dropdowns = ref([false, false, false, false, false, false]);\r\n    const pages = ref([0, 0, 0, 0, 0, 0]); // Página atual para cada dropdown\r\n\r\n    const itemsPerPage = 7; // Número de itens por página\r\n\r\n    const toggleDropdown = (index) => {\r\n      dropdowns.value[index] = !dropdowns.value[index];\r\n    };\r\n\r\n    // Agrupa itens baseados na relação com as obras e conta as ocorrências\r\n  const groupAndCountByCustomRelation = (relationKey, mapFn) => {\r\n    const grouped = obras.value.reduce((acc, obra) => {\r\n      const key = mapFn(obra);  // mapFn agora corretamente acessa a chave desejada\r\n      if (!key) return acc;\r\n      acc[key] = (acc[key] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(grouped)\r\n      .map(([text, count]) => ({ text, count }))\r\n      .sort((a, b) => a.text.localeCompare(b.text));\r\n  };\r\n\r\n  // Atualiza os dropdowns após carregar os dados\r\n  const updateDropdowns = () => {\r\n    // Agora chamamos a função corretamente, passando a função de mapeamento para o autor\r\n    dropdownOptions.value[0] = groupAndCountByCustomRelation(\"autor_id\", (obra) => obra.autor_id);\r\n  };\r\n\r\n\r\n    // Função para obter os itens visíveis da página atual\r\n    const getVisibleItems = (index) => {\r\n      const start = pages.value[index] * itemsPerPage;\r\n      return dropdownOptions.value[index].slice(start, start + itemsPerPage);\r\n    };\r\n\r\n    // Verifica se há uma página anterior\r\n    const hasPreviousPage = (index) => {\r\n      return pages.value[index] > 0;\r\n    };\r\n\r\n    // Verifica se há uma página seguinte\r\n    const hasNextPage = (index) => {\r\n      const totalItems = dropdownOptions.value[index].length;\r\n      return pages.value[index] * itemsPerPage + itemsPerPage < totalItems;\r\n    };\r\n\r\n    // Vai para a página anterior\r\n    const goToPreviousPage = (index) => {\r\n      if (pages.value[index] > 0) {\r\n        pages.value[index]--;\r\n      }\r\n    };\r\n\r\n    // Vai para a próxima página\r\n    const goToNextPage = (index) => {\r\n      const totalItems = dropdownOptions.value[index].length;\r\n      if (pages.value[index] * itemsPerPage + itemsPerPage < totalItems) {\r\n        pages.value[index]++;\r\n      }\r\n    };\r\n\r\n    onMounted(async () => {\r\n      try {\r\n        await autorStore.listarAutores();\r\n        autores.value = autorStore.autores || [];\r\n        \r\n        await orientadorStore.listarOrientadores();\r\n        orientadores.value = orientadorStore.orientadores || [];\r\n        \r\n        await obraStore.listarObras();\r\n        obras.value = obraStore.obras || [];\r\n        tiposDeObra.value = obras.value.map((obra) => obra.tipo).filter((t) => t);\r\n\r\n        await cursoStore.listarCursos();\r\n        cursos.value = cursoStore.cursos || [];\r\n\r\n        // Atualiza os dropdowns com os dados carregados\r\n        updateDropdowns();\r\n      } catch (error) {\r\n        console.error(\"Erro ao carregar dados:\", error);\r\n      }\r\n    });\r\n\r\n    return {\r\n      autores,\r\n      orientadores,\r\n      tiposDeObra,\r\n      cursos,\r\n      obras,\r\n      dropdownOptions,\r\n      buttons,\r\n      dropdowns,\r\n      toggleDropdown,\r\n      getVisibleItems,\r\n      hasPreviousPage,\r\n      hasNextPage,\r\n      goToPreviousPage,\r\n      goToNextPage,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.button-container {\r\n  margin-top: 20px;\r\n}\r\n\r\n.filter-button {\r\n  width: 100%;\r\n  background-color: #00420c;\r\n  color: #fff;\r\n  height: 50px;\r\n  text-transform: none;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  padding: 0 16px;\r\n}\r\n\r\n.filter-button:hover {\r\n  background-color: #001a05;\r\n}\r\n\r\n.dropdown-list {\r\n  background: #e0f2f1;\r\n  border-radius: 8px;\r\n  padding: 8px 16px;\r\n  margin-top: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.dropdown-list ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.dropdown-list li {\r\n  font-size: 14px;\r\n  margin-bottom: 4px;\r\n  color: #004d40;\r\n}\r\n\r\n.dropdown-list li:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.pagination-buttons {\r\n  margin-top: 12px;\r\n}\r\n\r\n.pagination-button {\r\n  margin-top: 10px;\r\n  background-color: #004d40;\r\n  color: #fff;\r\n  font-weight: bold;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}