{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      results: [],\n      // Inicializando a lista vazia, que será preenchida com os dados da API\n      searchQuery: this.$route.query.searchQuery || \"\" // Pega o termo de pesquisa da query\n    };\n  },\n  created() {\n    this.fetchResults(); // Chama a função que vai buscar os dados do backend quando o componente for criado\n  },\n  methods: {\n    async fetchResults() {\n      try {\n        // Substitua a URL pelo endpoint da sua API\n        const response = await axios.get(\"http://seu-backend-endpoint/obras\");\n\n        // Atualiza a lista de resultados com os dados da resposta\n        this.results = response.data; // Supondo que a resposta seja um array de objetos com as propriedades title, author, date\n      } catch (error) {\n        console.error(\"Erro ao buscar resultados:\", error);\n        alert(\"Erro ao buscar resultados.\");\n      }\n    }\n  },\n  computed: {\n    filteredResults() {\n      if (this.searchQuery.trim() === \"\") {\n        return this.results; // Retorna todas as obras se não houver pesquisa\n      }\n\n      // Filtra os resultados com base no título ou autor\n      return this.results.filter(result => result.title.toLowerCase().includes(this.searchQuery.toLowerCase()) || result.author.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    }\n  }\n};","map":{"version":3,"names":["axios","data","results","searchQuery","$route","query","created","fetchResults","methods","response","get","error","console","alert","computed","filteredResults","trim","filter","result","title","toLowerCase","includes","author"],"sources":["C:\\Users\\Micro\\Music\\sistema_tcc\\aplicacao\\frontend\\src\\components\\lista\\ListaResultados.vue"],"sourcesContent":["<template>\r\n  <v-container>\r\n    <v-row class=\"section-title\" justify=\"center\">\r\n      <v-col cols=\"12\" md=\"7\">\r\n        <h4 class=\"text-center\">RESULTADO DA BUSCA</h4>\r\n      </v-col>\r\n    </v-row>\r\n\r\n    <v-row justify=\"center\">\r\n      <v-col cols=\"12\" md=\"7\">\r\n        <v-card v-for=\"(result, index) in filteredResults\" :key=\"index\" class=\"mb-3 result-card\">\r\n          <v-card-text>\r\n            <h5 class=\"result-title\">{{ result.title }}</h5>\r\n            <p class=\"result-author\">\r\n              <strong>AUTOR(ES):</strong> {{ result.author }}\r\n            </p>\r\n            <p class=\"result-date\">{{ result.date }}</p>\r\n          </v-card-text>\r\n        </v-card>\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      results: [],  // Inicializando a lista vazia, que será preenchida com os dados da API\r\n      searchQuery: this.$route.query.searchQuery || \"\",  // Pega o termo de pesquisa da query\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchResults();  // Chama a função que vai buscar os dados do backend quando o componente for criado\r\n  },\r\n  methods: {\r\n    async fetchResults() {\r\n      try {\r\n        // Substitua a URL pelo endpoint da sua API\r\n        const response = await axios.get(\"http://seu-backend-endpoint/obras\");\r\n\r\n        // Atualiza a lista de resultados com os dados da resposta\r\n        this.results = response.data;  // Supondo que a resposta seja um array de objetos com as propriedades title, author, date\r\n      } catch (error) {\r\n        console.error(\"Erro ao buscar resultados:\", error);\r\n        alert(\"Erro ao buscar resultados.\");\r\n      }\r\n    },\r\n  },\r\n  computed: {\r\n    filteredResults() {\r\n      if (this.searchQuery.trim() === \"\") {\r\n        return this.results;  // Retorna todas as obras se não houver pesquisa\r\n      }\r\n\r\n      // Filtra os resultados com base no título ou autor\r\n      return this.results.filter(\r\n        (result) =>\r\n          result.title.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n          result.author.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Título da Seção */\r\n.section-title h4 {\r\n  margin-top: 50px;\r\n  background: linear-gradient(90deg, #00420c, #28a745);\r\n  color: white;\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Cartão de Resultado */\r\n.result-card {\r\n  background-color: #f9f9f9;\r\n  border-radius: 10px;\r\n}\r\n\r\n.result-title {\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n  color: #006dba;\r\n  margin: 0;\r\n}\r\n\r\n.result-author {\r\n  font-size: 14px;\r\n  margin: 5px 0;\r\n  color: #004b81;\r\n}\r\n\r\n.result-date {\r\n  font-size: 12px;\r\n  color: #8c92b1;\r\n  text-align: right;\r\n}\r\n</style>"],"mappings":"AAyBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MAAG;MACdC,WAAW,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,WAAU,IAAK,EAAE,CAAG;IACrD,CAAC;EACH,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,YAAY,CAAC,CAAC,EAAG;EACxB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF;QACA,MAAME,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,mCAAmC,CAAC;;QAErE;QACA,IAAI,CAACR,OAAM,GAAIO,QAAQ,CAACR,IAAI,EAAG;MACjC,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDE,KAAK,CAAC,4BAA4B,CAAC;MACrC;IACF;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB,IAAI,IAAI,CAACZ,WAAW,CAACa,IAAI,CAAC,MAAM,EAAE,EAAE;QAClC,OAAO,IAAI,CAACd,OAAO,EAAG;MACxB;;MAEA;MACA,OAAO,IAAI,CAACA,OAAO,CAACe,MAAM,CACvBC,MAAM,IACLA,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAClB,WAAW,CAACiB,WAAW,CAAC,CAAC,KAClEF,MAAM,CAACI,MAAM,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAClB,WAAW,CAACiB,WAAW,CAAC,CAAC,CACvE,CAAC;IACH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}